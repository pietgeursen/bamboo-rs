on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Build Releases for All The Targets 
env:
  BIN: bamboo-rs 

jobs:
  # This job downloads and stores `cross` as an artifact, so that it can be
  # redownloaded across all of the jobs. Currently this copied pasted between
  # `mean_bean_ci.yml` and `mean_bean_deploy.yml`. Make sure to update both places when making
  # changes.
  install-cross:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          depth: 50
      - uses: XAMPPRocky/get-github-release@v1
        id: cross
        with:
          owner: rust-embedded
          repo: cross
          matches: ${{ matrix.platform }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v1
        with:
          name: cross-${{ matrix.platform }}
          path: ${{ steps.cross.outputs.install_path }}
    strategy:
      matrix:
        platform: [linux-musl, apple-darwin]

  windows:
    env:
      LIB_BAMBOO_SO: bamboo_c.dll 
      LIB_BAMBOO_A: libbamboo_c.a 
      BAMBOO_CLI: bamboo-rs-cli.exe 
    runs-on: windows-latest
    needs: install-cross
    strategy:
      fail-fast: false
      matrix:
        target:
          # MSVC
          - i686-pc-windows-msvc
          - x86_64-pc-windows-msvc
          # GNU
          # - i686-pc-windows-gnu
          # - x86_64-pc-windows-gnu
    steps:
      - uses: actions/checkout@v2
      - run: bash ci/set_rust_version.bash stable ${{ matrix.target }}
      - run: bash ci/build.bash cargo ${{ matrix.target }} RELEASE
      - run: |
          cd ./target/${{ matrix.target }}/release/
          7z a "${{ env.BIN }}.zip" "${{ env.BAMBOO_CLI }}"
          mv "${{ env.BIN }}.zip" $GITHUB_WORKSPACE
        shell: bash
        # We're using using a fork of `actions/create-release` that detects
        # whether a release is already available or not first.
      - uses: XAMPPRocky/create-release@v1.0.2
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          # Draft should **always** be false. GitHub doesn't provide a way to
          # get draft releases from its API, so there's no point using it.
          draft: false
          prerelease: false
      - name: upload-dynamic-lib
        uses: actions/upload-release-asset@v1
        id: upload-dynamic-lib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BIN }}.zip
          asset_name: ${{ env.BIN }}-${{ matrix.target }}.zip
          asset_content_type: application/zip
  macos:
    env:
      LIB_BAMBOO_SO: libbamboo_c.dylib
      LIB_BAMBOO_A: libbamboo_c.a
      BAMBOO_CLI: bamboo-rs-cli
    runs-on: macos-latest
    needs: install-cross
    strategy:
      fail-fast: false
      matrix:
        target:
          # macOS
          - x86_64-apple-darwin
          # iOS
          # - aarch64-apple-ios
          # - armv7-apple-ios
          # - armv7s-apple-ios
          # - i386-apple-ios
          # - x86_64-apple-ios
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: cross-apple-darwin
          path: /usr/local/bin/
      - run: chmod +x /usr/local/bin/cross

      - run: ci/set_rust_version.bash stable ${{ matrix.target }}
      - run: ci/build.bash cross ${{ matrix.target }} RELEASE
      - run: tar -czvf ${{ env.BIN }}.tar.gz --directory=target/${{ matrix.target }}/release ${{ env.LIB_BAMBOO_SO }} ${{ env.LIB_BAMBOO_A }} ${{ env.BAMBOO_CLI }}
      - uses: XAMPPRocky/create-release@v1.0.2
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: upload-dynamic-lib
        uses: actions/upload-release-asset@v1
        id: upload-dynamic-lib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BIN }}.tar.gz
          asset_name: ${{ env.BIN }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/zip
  linux:
    env:
      # The * is because musl targets don't produce dynamic libs
      LIB_BAMBOO_SO: libbamboo_c.s* 
      LIB_BAMBOO_A: libbamboo_c.a 
      BAMBOO_CLI: bamboo-rs-cli 
    runs-on: ubuntu-latest
    needs: install-cross
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
          - target: arm-unknown-linux-gnueabi
          - target: armv7-unknown-linux-gnueabihf
          - target: i686-unknown-linux-gnu
          - target: i686-unknown-linux-musl
            #- mips-unknown-linux-gnu
            #- mips64-unknown-linux-gnuabi64
            #- mips64el-unknown-linux-gnuabi64
            #- mipsel-unknown-linux-gnu
            #- powerpc-unknown-linux-gnu
            #- powerpc64-unknown-linux-gnu
            #- powerpc64le-unknown-linux-gnu
            #- s390x-unknown-linux-gnu
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl
          # Android
          - target: aarch64-linux-android
          - target: arm-linux-androideabi
          - target: armv7-linux-androideabi
          - target: i686-linux-android
          - target: x86_64-linux-android
          # *BSD
          # The FreeBSD targets can have issues linking so they are disabled
          # by default.
          # - i686-unknown-freebsd
          # - x86_64-unknown-freebsd
          - target: x86_64-unknown-netbsd
          # Solaris
          #- sparcv9-sun-solaris
          # Bare Metal
          # These are no-std embedded targets, so they will only build if your
          # crate is `no_std` compatible.
          - target: thumbv6m-none-eabi
            no_std: 1
          - target: thumbv7em-none-eabi
            no_std: 1
          - target: thumbv7em-none-eabihf
            no_std: 1
          - target: thumbv7m-none-eabi
            no_std: 1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: cross-linux-musl
          path: /tmp/
      - run: chmod +x /tmp/cross
      - run: ci/set_rust_version.bash stable ${{ matrix.target }}
      - run: ci/build.bash /tmp/cross ${{ matrix.target }} RELEASE ${{ matrix.no_std }}
      - run:  |
              mkdir stage
              cp target/${{ matrix.target }}/release/bamboo-rs-cli stage/ || true
              cp target/${{ matrix.target }}/release/libbamboo_rs_core.* stage/
              cp bamboo-rs-core/libbamboo.h stage
              cd stage
              tar czf ../${{ env.BIN }}.tar.gz *
      - uses: XAMPPRocky/create-release@v1.0.2
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: upload-dynamic-lib
        uses: actions/upload-release-asset@v1
        id: upload-dynamic-lib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BIN }}.tar.gz
          asset_name: ${{ env.BIN }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/zip
